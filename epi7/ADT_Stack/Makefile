# =========================================================================
# 1. 变量定义
# =========================================================================

ifndef CC
	CC = gcc
endif

ifndef CFLAGS
	CFLAGS = -Wall -g
endif

# 使用 wildcard 自动查找所有 .c 源文件
SRCS := $(wildcard *.c)

# 使用 patsubst 将源文件列表转换为目标文件列表
# 例如 main.c stack.c -> main.o stack.o
OBJS := $(patsubst %.c,%.o,$(SRCS))

# 定义最终可执行文件的名称
TARGET = stack_example


# =========================================================================
# 2. 编译和链接规则
# =========================================================================

.PHONY: all
# 默认目标，执行时会构建最终的可执行文件
all: $(TARGET)

# 链接规则：将所有目标文件链接成最终的可执行文件
$(TARGET): $(OBJS)
	$(CC) $(CFLAGS) -o $@ $^

# 编译规则：这是一个通用的模式规则，用于将任意 .c 文件编译成 .o 文件
# 它利用了 make 的自动依赖推导功能

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

# =========================================================================
# 3. 清理规则
# =========================================================================

.PHONY: clean
clean:
	rm -f $(OBJS) $(TARGET)
